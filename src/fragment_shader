#version 330 core
out vec4 FragColor;

struct Light
{
    vec3 position;
    vec3 direction;
    vec3 ambient;
    vec3 diffuse;
    float cutOff;
    float constant;
    float linear;
    float quadratic;
};

in vec3 FragPos;
in vec3 Normal;
in vec2 TexCoords;

uniform sampler2D currTexture;
uniform Light light1;
uniform Light light2;
uniform Light light3;

vec3 spotlight(Light light)
{
    vec3 lightDir = normalize(light.position - FragPos);

    float theta = dot(lightDir, normalize(-light.direction));

    if (theta > light.cutOff)
    {
        // ambient
        vec3 ambient = light.ambient * texture(currTexture, TexCoords).rgb;

        // diffuse
        vec3 norm = normalize(Normal);
        float diff = max(dot(norm, lightDir), 0.0);
        vec3 diffuse = light.diffuse * diff * texture(currTexture, TexCoords).rgb;

        // attenuation
        float distance = length(light.position - FragPos);
        float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * distance * distance);

        return vec3(ambient + diffuse * attenuation);
    }
    else
    {
        return vec3(light.ambient * texture(currTexture, TexCoords).rgb);
    }
}

void main()
{
    vec3 result = vec3(0.0);
    result += spotlight(light1);
    result += spotlight(light2);
    result += spotlight(light3);
    FragColor = vec4(result, 1.0);
}